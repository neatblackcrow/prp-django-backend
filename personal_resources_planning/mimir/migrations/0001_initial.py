# Generated by Django 4.2.3 on 2023-07-21 19:50

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdOn', models.DateTimeField(db_column='created_on', default=datetime.datetime.now)),
                ('updatedOn', models.DateTimeField(db_column='updated_on', default=datetime.datetime.now)),
                ('lastPredictedInterval', models.IntegerField(db_column='last_predicted_interval')),
                ('reviewInterval', models.IntegerField(db_column='review_interval')),
                ('repetition', models.IntegerField(db_column='repetition')),
                ('grade', models.IntegerField(db_column='grade')),
                ('predictedInterval', models.IntegerField(db_column='predicted_interval')),
                ('front', models.TextField(db_column='front')),
                ('back', models.TextField(db_column='back', null=True)),
                ('nextReviewOn', models.DateField(db_column='next_review_on')),
                ('lastReviewOn', models.DateField(db_column='last_review_on', default=datetime.datetime.now)),
                ('ordered', models.IntegerField(db_column='ordered')),
            ],
            options={
                'db_table': 'card',
            },
        ),
        migrations.CreateModel(
            name='CardType',
            fields=[
                ('name', models.TextField(db_column='name', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'card_type',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(db_column='name')),
                ('createdOn', models.DateTimeField(db_column='created_on', default=datetime.datetime.now)),
                ('updatedOn', models.DateTimeField(db_column='updated_on', default=datetime.datetime.now)),
                ('ordered', models.IntegerField(db_column='ordered')),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='NeuralNetworkWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(db_column='weight')),
            ],
            options={
                'db_table': 'neural_network_weight',
            },
        ),
        migrations.CreateModel(
            name='UserCase',
            fields=[
                ('createdOn', models.DateTimeField(db_column='created_on', default=datetime.datetime.now, primary_key=True, serialize=False)),
                ('lastPredictedInterval', models.FloatField(db_column='last_predicted_interval')),
                ('reviewInterval', models.FloatField(db_column='review_interval')),
                ('repetition', models.FloatField(db_column='repetition')),
                ('grade', models.FloatField(db_column='grade')),
                ('predictedInterval', models.FloatField(db_column='predicted_interval')),
            ],
            options={
                'db_table': 'user_case',
            },
        ),
        migrations.AddConstraint(
            model_name='usercase',
            constraint=models.CheckConstraint(check=models.Q(('lastPredictedInterval__gte', 0.0), ('lastPredictedInterval__lte', 1.0)), name='lastPredictedInterval range'),
        ),
        migrations.AddConstraint(
            model_name='usercase',
            constraint=models.CheckConstraint(check=models.Q(('reviewInterval__gte', 0.0), ('reviewInterval__lte', 1.0)), name='reviewInterval range'),
        ),
        migrations.AddConstraint(
            model_name='usercase',
            constraint=models.CheckConstraint(check=models.Q(('repetition__gte', 0.0), ('repetition__lte', 1.0)), name='repetition range'),
        ),
        migrations.AddConstraint(
            model_name='usercase',
            constraint=models.CheckConstraint(check=models.Q(('grade__gte', 0.0), ('grade__lte', 1.0)), name='grade range'),
        ),
        migrations.AddConstraint(
            model_name='usercase',
            constraint=models.CheckConstraint(check=models.Q(('predictedInterval__gte', 0.0), ('predictedInterval__lte', 1.0)), name='predictedInterval range'),
        ),
        migrations.AddField(
            model_name='category',
            name='parentCategory',
            field=models.ForeignKey(db_column='parent_category', on_delete=django.db.models.deletion.PROTECT, to='mimir.category'),
        ),
        migrations.AddField(
            model_name='card',
            name='cardType',
            field=models.ForeignKey(db_column='card_type', on_delete=django.db.models.deletion.PROTECT, to='mimir.cardtype'),
        ),
        migrations.AddField(
            model_name='card',
            name='category',
            field=models.ForeignKey(db_column='category', default=1, on_delete=django.db.models.deletion.PROTECT, to='mimir.category'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.CheckConstraint(check=models.Q(('updatedOn__gte', models.F('createdOn'))), name='updatedOn_gte_createdOn'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.CheckConstraint(check=models.Q(('ordered__gt', 0)), name='ordered_gt_0'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('lastPredictedInterval__gte', 0), ('lastPredictedInterval__lte', 2048)), name='lastPredictedInterval range card'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('reviewInterval__gte', 0), ('reviewInterval__lte', 2048)), name='review range card'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('repetition__gte', 0), ('repetition__lte', 128)), name='repetition range card'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('grade__gte', 0), ('grade__lte', 5)), name='grade range card'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('predictedInterval__gte', 0), ('predictedInterval__lte', 2048)), name='predictedInterval range cared'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('updatedOn__gte', models.F('createdOn'))), name='updatedOn_gte_createdOn card'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('ordered__gt', 0)), name='ordered_gt_0 card'),
        ),
    ]
